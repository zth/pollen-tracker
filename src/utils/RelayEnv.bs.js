// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonRelay from "reason-relay/src/ReasonRelay.bs.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

require('isomorphic-fetch')
;

var Graphql_error = Caml_exceptions.create("RelayEnv.Graphql_error");

function createFetchQuery(baseUrl, operation, variables, _cacheConfig) {
  return fetch(Belt_Option.getWithDefault(baseUrl, "") + "/api/graphql", Fetch.RequestInit.make(/* Post */2, {
                      "content-type": "application/json",
                      accept: "application/json"
                    }, Caml_option.some(JSON.stringify(Js_dict.fromList(/* :: */[
                                  /* tuple */[
                                    "query",
                                    operation.text
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "variables",
                                      variables
                                    ],
                                    /* [] */0
                                  ]
                                ]))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (resp) {
                if (resp.ok) {
                  return resp.json();
                } else {
                  return Promise.reject([
                              Graphql_error,
                              "Request failed: " + resp.statusText
                            ]);
                }
              }));
}

function initEnvironment(baseUrl, queryRecords) {
  var network = ReasonRelay.Network.makePromiseBased((function (param, param$1, param$2) {
          return createFetchQuery(baseUrl, param, param$1, param$2);
        }), undefined, /* () */0);
  var source = queryRecords !== undefined ? ReasonRelay.RecordSource.make(Caml_option.some(Caml_option.valFromOption(queryRecords)), /* () */0) : ReasonRelay.RecordSource.make(undefined, /* () */0);
  var store = ReasonRelay.Store.make(source, undefined, /* () */0);
  return ReasonRelay.Environment.make(network, store, undefined, /* () */0);
}

export {
  Graphql_error ,
  createFetchQuery ,
  initEnvironment ,
  
}
/*  Not a pure module */
