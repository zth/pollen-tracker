// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Layout from "./Layout.bs.js";
import * as Navigation from "./Navigation.bs.js";
import * as ReasonRelay from "@dblechoc/reason-relay/src/ReasonRelay.bs.js";
import * as EmptyContent from "./EmptyContent.bs.js";
import * as IndexRootVendorFollowUpQuery_graphql from "../__generated__/IndexRootVendorFollowUpQuery_graphql.bs.js";
import * as IndexRoot_AddressEntry_vendorFollowUp_graphql from "../__generated__/IndexRoot_AddressEntry_vendorFollowUp_graphql.bs.js";

var UseFragment = ReasonRelay.MakeUseFragment({
      fragmentSpec: IndexRoot_AddressEntry_vendorFollowUp_graphql.node
    });

function use(fRef) {
  return Curry._1(UseFragment.use, fRef);
}

var Fragment = {
  Operation: /* alias */0,
  UseFragment: UseFragment,
  use: use
};

function IndexRoot$AddressEntry(Props) {
  var vendorFollowUpRef = Props.vendorFollowUpRef;
  var vendorFollowUp = Curry._1(UseFragment.use, vendorFollowUpRef);
  var match = React.useState((function () {
          return vendorFollowUp.contact.address;
        }));
  var setContactAddress = match[1];
  return React.createElement("div", {
              className: "m-auto max-w-sm"
            }, React.createElement("div", {
                  className: "mx-3"
                }, React.createElement("span", {
                      className: "text-2xl"
                    }), React.createElement("br", undefined), React.createElement("span", {
                      className: "text-gray-700"
                    }, "Let's get started! Please confirm your current residential address."), React.createElement("input", {
                      className: "block w-full rounded-lg border border-gray-400 px-3 py-2 font-semibold text-gray-900 placeholder-gray-600 mt-4 focus:outline-none focus:shadow-outline",
                      placeholder: "Please enter your address",
                      value: match[0],
                      onChange: (function ($$event) {
                          return Curry._1(setContactAddress, $$event.target.value);
                        })
                    })));
}

var AddressEntry = {
  Fragment: Fragment,
  make: IndexRoot$AddressEntry
};

var UseQuery = ReasonRelay.MakeUseQuery({
      query: IndexRootVendorFollowUpQuery_graphql.node
    });

var use$1 = UseQuery.use;

var Query_fetch = UseQuery.$$fetch;

var Query_preload = UseQuery.preload;

var Query_usePreloaded = UseQuery.usePreloaded;

var Query = {
  Operation: /* alias */0,
  UseQuery: UseQuery,
  use: use$1,
  $$fetch: Query_fetch,
  preload: Query_preload,
  usePreloaded: Query_usePreloaded
};

function IndexRoot(Props) {
  var token = Props.token;
  var queryData = Curry._5(use$1, {
        token: token
      }, undefined, undefined, undefined, /* () */0);
  var match = queryData.vendorFollowUp;
  if (match == null) {
    return React.createElement(EmptyContent.make, {
                emptyText: "Followup not found !"
              });
  } else {
    return React.createElement(Layout.make, {
                children: React.createElement("div", {
                      className: "h-screen flex flex-col"
                    }, React.createElement(Navigation.make, {
                          agentRef: match.agent
                        }), React.createElement(IndexRoot$AddressEntry, {
                          vendorFollowUpRef: match
                        }))
              });
  }
}

var make = IndexRoot;

var $$default = IndexRoot;

export {
  AddressEntry ,
  Query ,
  make ,
  $$default ,
  $$default as default,
  
}
/* UseFragment Not a pure module */
